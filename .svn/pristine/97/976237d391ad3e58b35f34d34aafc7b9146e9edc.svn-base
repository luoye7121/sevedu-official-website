/**
 * Created by chushitong on 2016/12/14.
 */
//npm install --save-dev gulp del gulp-cached gulp-uglify gulp-filter gulp-rev-append gulp-cssnano gulp-imagemin gulp-file-include gulp-autoprefixer
//npm install --save-dev jshint gulp-jshint
var gulp = require('gulp'), // 必须先引入gulp插件
    del = require('del'),  // 文件删除
    cached = require('gulp-cached'), // 缓存当前任务中的文件，只让已修改的文件通过管道
    uglify = require('gulp-uglify'), // js 压缩
    filter = require('gulp-filter'), // 过滤筛选指定文件
//jshint = require('gulp-jshint'), // js 语法校验
    rev = require('gulp-rev-append'), // 插入文件指纹（MD5）
    cssnano = require('gulp-cssnano'), // CSS 压缩
    imagemin = require('gulp-imagemin'), // 图片优化
     browserSync=require('browser-sync').create(),
     runSequence=require('run-sequence'),
     compass=require('gulp-compass');
    fileinclude = require('gulp-file-include'), // 可以 include html 文件
    autoprefixer = require('gulp-autoprefixer'); // 添加 CSS 浏览器前缀

// css
 gulp.task('serve',function(){
  // browserSync.init({
  //  serve:'./dist',
  //  port:8888
  // });staticFiles
   browserSync.init({
    server: {
      baseDir: './resources/static/sevedu/' // 在 dist 目录下启动本地服务器环境，自动启动默认浏览器
    },
    port:8080
    });
});
gulp.task('css', function() {
   return gulp.src('./src/**/*.scss')
  .pipe(compass({
    config_file:'./config.rb',
    css:'src/css/',
    sass:'src/sass'
  }))
  .pipe(compass())
  .on('error',function(err){
    console.log(err);
    this.emit('end');
  })
  // .pipe(gulp.dest('./src/css/'));
    // return gulp.src('src/css/**/*.css')
        .pipe(cached('css'))// 缓存传入文件，只让已修改的文件通过管道（第一次执行是全部通过，因为还没有记录缓存）
        //.pipe(gulp.dest('../../resources/static/member/css')) // 把管道里的所有文件输出到 dist/css 目录
        // .pipe(filter(['**/*', '!**/*.min.css'])) // 筛选出管道中的非 *.min.css 文件
        // .pipe(compass())
        .pipe(autoprefixer('last 6 version'))
        .pipe(cssnano())
        .pipe(gulp.dest('resources/static/sevedu/css'))
        .pipe(browserSync.reload({stream:true}));  
});
gulp.task('font',function(){
  return gulp.src('src/fonts/**/*.*')
         .pipe(gulp.dest('resources/static/sevedu/fonts'));
});
// script （拷贝 *.min.js，常规 js 则输出压缩与未压缩两个版本）
gulp.task('script', function() {
    return gulp.src(['src/js/**/*.js'])
        .pipe(cached('script'))
        //.pipe(gulp.dest('../../resources/static/fenxiao/js'))
        .pipe(filter(['**/*'])) // 筛选出管道中的非 *.min.js 文件
        //.pipe(jshint('.jshintrc')) // js的校验与合并，根据需要开启
        //.pipe(jshint.reporter('default'))
        // .pipe(uglify())
        .pipe(gulp.dest('resources/static/sevedu/js'))
        .pipe(browserSync.reload({stream:true}));  
});
// image
gulp.task('image', function() {
    return gulp.src('src/images/**/*.*')
        .pipe(cached('image'))
        .pipe(imagemin({optimizationLevel: 3, progressive: true, interlaced: true, multipass: true}))
        // 取值范围：0-7（优化等级）,是否无损压缩jpg图片，是否隔行扫描gif进行渲染，是否多次优化svg直到完全优化
        .pipe(gulp.dest('resources/static/sevedu/images'))
        .pipe(browserSync.reload({stream:true}));  
});
// html 编译 html 文件并复制字体
gulp.task('html', function () {
    return gulp.src('src/**/*.html')
        .pipe(fileinclude()) // include html
        .pipe(rev()) // 生成并插入 MD5
        .pipe(gulp.dest('resources/static/sevedu'))
        .pipe(browserSync.reload({stream:true}));  
});
// clean 清空 dist 目录
gulp.task('clean', function() {
    return del('resources/static/sevedu/**/*');
});
// gulp.task('compass', function() {
//   return gulp.src('./src/**/*.scss')
//   .pipe(compass({
//     config_file:'./config.rb',
//     css:'src/css/',
//     sass:'src/sass'
//   }))
//   .pipe(compass())
//   .on('error',function(err){
//     console.log(err);
//     this.emit('end');
//   })
//   .pipe(gulp.dest('./src/css/'));
// });
// build，关连执行全部编译任务
gulp.task('build', function () {
  return runSequence(['css','image','html','script','font']);
});

// default 默认任务，依赖清空任务
// gulp.task('default', ['clean'], function() {
//     gulp.start('build');
// });
 gulp.task('default', function() {
  return runSequence(['clean'],['build'],['serve','watch']);
});
 gulp.task('reload',function(){
  return browserSync.reload();
});
// watch 开启本地服务器并监听
gulp.task('watch', function() {
    // 监控 CSS 文件，有变动则执行CSS注入
    gulp.watch('src/css/**/*.css',function(){
       gulp.run('css');
    });
    // 监控 js 文件，有变动则执行 script 任务
    gulp.watch('src/js/**/*.js',function(){
        gulp.run('script');
    });
    // 监控图片文件，有变动则执行 image 任务
    gulp.watch('src/img/**/*.*',function(){
        gulp.run('image')
    });
    // 监控 html 文件，有变动则执行 html 任务
    gulp.watch('src/**/*.html',function(){
        gulp.run('html')
    });
});